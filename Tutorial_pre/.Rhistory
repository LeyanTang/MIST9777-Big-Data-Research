facet_wrap(~ DegreeType, scales = "free_y", ncol = 1) +
scale_color_viridis_d() +
labs(title = "Relationship Between Bot Ratio and Degree Metrics",
x = "Bot Ratio",
y = "Degree Value",
color = "Degree Type")
ggplotly(p9) %>%
layout(height = 700)
head(nodes$id[!nodes$id %in% names(indegree_dist)])
# Ensure node IDs are character
nodes$id <- as.character(nodes$id)
# Check node counts
cat("nodes$id rows:", length(nodes$id), "\n")
cat("g_filtered vertex count:", length(igraph::V(g_filtered)), "\n")
# Preview the IDs of nodes and vertices
head(nodes$id)
head(igraph::V(g_filtered)$name)
# Assign node IDs as vertex names ONLY if they match in length
if (length(nodes$id) == length(igraph::V(g_filtered))) {
igraph::V(g_filtered)$name <- nodes$id
} else {
stop("Mismatch: Number of rows in nodes != number of vertices in g_filtered")
}
nodes$id <- igraph::V(g_filtered)$name
# Calculate degrees
indegree_dist <- igraph::degree(g_filtered, mode = "in")
outdegree_dist <- igraph::degree(g_filtered, mode = "out")
degree_dist <- igraph::degree(g_filtered, mode = "total")
# Create data frame for plotting
degree_df <- data.frame(
ID = nodes$id,
InDegree = indegree_dist[nodes$id],
OutDegree = outdegree_dist[nodes$id],
Degree = degree_dist[nodes$id],
BotRatio = nodes$avg_bot_ratio,
Project = nodes$home_project
)
# Plot
p8 <- ggplot(degree_df, aes(x = InDegree, y = OutDegree, color = BotRatio, size = Degree)) +
geom_point(alpha = 0.7) +
scale_color_viridis_c() +
scale_size_continuous(range = c(1, 8)) +
labs(title = "In-Degree vs Out-Degree Correlation",
subtitle = paste("Correlation:", round(cor(degree_df$InDegree, degree_df$OutDegree), 3)),
x = "In-Degree",
y = "Out-Degree",
color = "Bot Ratio",
size = "Total Degree") +
theme(legend.position = "right")
ggplotly(p8)
degree_bot_df <- degree_df %>%
select(InDegree, OutDegree, Degree, BotRatio, Project) %>%
gather(key = "DegreeType", value = "DegreeValue", -BotRatio, -Project)
p9 <- ggplot(degree_bot_df, aes(x = BotRatio, y = DegreeValue, color = DegreeType)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = TRUE) +
facet_wrap(~ DegreeType, scales = "free_y", ncol = 1) +
scale_color_viridis_d() +
labs(title = "Relationship Between Bot Ratio and Degree Metrics",
x = "Bot Ratio",
y = "Degree Value",
color = "Degree Type")
ggplotly(p9) %>%
layout(height = 700)
set.seed(42) # For reproducible layout
par(mar = c(0, 0, 2, 0))
gplot(net,
vertex.col = bot_color,
vertex.cex = node_sizes,
edge.col = alpha("gray50", 0.5),
edge.lwd = (net %e% "weight") / 3,
main = "GitHub Contributor Network - By Bot Exposure",
displaylabels = FALSE,
mode = "fruchtermanreingold")
g <- graph_from_data_frame(edges, directed = TRUE, vertices = nodes)
# Get all unique bot exposure levels as simple character strings
all_groups_in_data <- as.character(unique(nodes$bot_exposure_level))
# Create a named color vector (simplified approach)
bot_group_colors <- setNames(
viridis::viridis(length(all_groups_in_data)),
all_groups_in_data
)
# Create visualization nodes and edges
vis_nodes_bot <- data.frame(
id = nodes$id,
label = nodes$id,
value = degree(g),
group = as.character(nodes$bot_exposure_level),
title = paste("<p><b>Contributor:</b>", nodes$id, "<br>",
"<b>Home Project:</b>", nodes$home_project, "<br>",
"<b>Bot Ratio:</b>", round(nodes$avg_bot_ratio, 2), "</p>")
)
# Create a color palette for projects
project_list <- unique(net %v% "home_project")
project_colors <- viridis_pal(option = "D")(length(project_list))
names(project_colors) <- project_list
bot_ratio <- net %v% "avg_bot_ratio"
bot_color <- viridis_pal(option = "B")(100)[ceiling(bot_ratio * 99) + 1]
# Set node sizes based on degree
node_sizes <- sqrt(degree_dist) / 2 + 0.5
# Plot the network with node colors based on home project
set.seed(42) # For reproducible layout
par(mar = c(0, 0, 2, 0))
gplot(net,
vertex.col = project_colors[as.character(net %v% "home_project")],
vertex.cex = node_sizes,
edge.col = alpha("gray50", 0.5),
edge.lwd = (net %e% "weight") / 3,
main = "GitHub Contributor Network - By Project",
displaylabels = FALSE,
mode = "fruchtermanreingold")
# Add a legend
legend("bottomright",
legend = project_list,
fill = project_colors,
title = "Home Project",
cex = 0.8)
set.seed(42) # For reproducible layout
par(mar = c(0, 0, 2, 0))
gplot(net,
vertex.col = bot_color,
vertex.cex = node_sizes,
edge.col = alpha("gray50", 0.5),
edge.lwd = (net %e% "weight") / 3,
main = "GitHub Contributor Network - By Bot Exposure",
displaylabels = FALSE,
mode = "fruchtermanreingold")
# Create a custom color bar for the legend
bot_levels <- seq(0, 1, 0.2)
bot_colors <- viridis_pal(option = "B")(length(bot_levels))
legend("bottomright",
legend = c("0.0", "0.2", "0.4", "0.6", "0.8", "1.0"),
fill = bot_colors,
title = "Bot Ratio",
cex = 0.8)
set.seed(42) # For reproducible layout
par(mar = c(0, 0, 2, 0))
gplot(net,
vertex.col = bot_color,
vertex.cex = node_sizes,
edge.col = alpha("gray50", 0.5),
edge.lwd = (net %e% "weight") / 3,
main = "GitHub Contributor Network - By Bot Exposure",
displaylabels = FALSE,
mode = "fruchtermanreingold")
# Create a custom color bar for the legend
bot_levels <- seq(0, 1, 0.2)
bot_colors <- viridis_pal(option = "B")(length(bot_levels))
legend("bottomright",
legend = c("0.0", "0.2", "0.4", "0.6", "0.8", "1.0"),
fill = bot_colors,
title = "Bot Ratio",
cex = 0.8)
g <- graph_from_data_frame(edges, directed = TRUE, vertices = nodes)
# Get all unique bot exposure levels as simple character strings
all_groups_in_data <- as.character(unique(nodes$bot_exposure_level))
# Create a named color vector (simplified approach)
bot_group_colors <- setNames(
viridis::viridis(length(all_groups_in_data)),
all_groups_in_data
)
# Create visualization nodes and edges
vis_nodes_bot <- data.frame(
id = nodes$id,
label = nodes$id,
value = degree(g),
group = as.character(nodes$bot_exposure_level),
title = paste("<p><b>Contributor:</b>", nodes$id, "<br>",
"<b>Home Project:</b>", nodes$home_project, "<br>",
"<b>Bot Ratio:</b>", round(nodes$avg_bot_ratio, 2), "</p>")
)
g <- igraph::graph_from_data_frame(edges, directed = TRUE, vertices = nodes)
node_degree <- igraph::degree(g, mode = "total")
# Prepare nodes for visNetwork
vis_nodes_bot <- data.frame(
id = nodes$id,
label = nodes$id,
value = node_degree,
group = as.character(nodes$bot_exposure_level),
title = paste0("<p><b>Contributor:</b> ", nodes$id, "<br>",
"<b>Home Project:</b> ", nodes$home_project, "<br>",
"<b>Bot Ratio:</b> ", round(nodes$avg_bot_ratio, 2), "</p>")
)
# Prepare edges
vis_edges <- data.frame(
from = as.character(edges$source),
to = as.character(edges$target),
value = edges$weight,
title = paste0("<p><b>Weight:</b> ", edges$weight, "<br>",
"<b>Bot Events:</b> ", edges$bot_event_count, "</p>")
)
# Use the cleaned graph object
g <- igraph::graph_from_data_frame(edges, directed = TRUE, vertices = nodes)
# Compute degree for sizing
node_degree <- igraph::degree(g, mode = "total")
# Ensure bot exposure level is character
nodes$bot_exposure_level <- as.character(nodes$bot_exposure_level)
# Create visNetwork nodes
vis_nodes_bot <- data.frame(
id = nodes$id,
label = nodes$id,
value = node_degree,
group = nodes$bot_exposure_level,
title = paste0("<p><b>Contributor:</b> ", nodes$id, "<br>",
"<b>Home Project:</b> ", nodes$home_project, "<br>",
"<b>Bot Ratio:</b> ", round(nodes$avg_bot_ratio, 2), "</p>")
)
# Create visNetwork edges using the correct column names: 'from' and 'to'
vis_edges <- data.frame(
from = as.character(edges$from),
to = as.character(edges$to),
value = edges$weight,
title = paste0("<p><b>Weight:</b> ", edges$weight, "<br>",
"<b>Bot Events:</b> ", edges$bot_event_count, "</p>")
)
# Build interactive network
visNetwork(vis_nodes_bot, vis_edges, width = "100%", height = "600px") %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visOptions(highlightNearest = list(enabled = TRUE, degree = 1, hover = TRUE),
selectedBy = "group") %>%
visLegend(width = 0.2, position = "right") %>%
visPhysics(stabilization = FALSE) %>%
visInteraction(navigationButtons = TRUE, keyboard = TRUE) %>%
visLayout(randomSeed = 42)
# Recalculate bot_color so it matches the order of vertices in `net`
bot_ratio <- net %v% "avg_bot_ratio"
# Normalize the bot_ratio to range 0â€“1 for safe mapping (handles edge cases)
bot_ratio[is.na(bot_ratio)] <- 0
bot_color <- viridis::viridis(100)[ceiling(bot_ratio * 99) + 1]
# Set node sizes based on total degree (optional but useful)
node_sizes <- sqrt(degree(net, cmode = "freeman")) / 2 + 0.5
# Plot the network
set.seed(42)
par(mar = c(0, 0, 2, 0))
gplot(net,
vertex.col = bot_color,
vertex.cex = node_sizes,
edge.col = scales::alpha("gray50", 0.4),
edge.lwd = (net %e% "weight") / 3,
main = "GitHub Contributor Network - By Bot Exposure",
displaylabels = FALSE,
mode = "fruchtermanreingold")
# Add legend
color_levels <- seq(0, 1, by = 0.2)
legend_colors <- viridis::viridis(length(color_levels))
legend("bottomright",
legend = as.character(color_levels),
fill = legend_colors,
title = "Bot Ratio",
cex = 0.8)
\bot_ratio <- net %v% "avg_bot_ratio"
bot_ratio <- net %v% "avg_bot_ratio"
# Safety check: Are they varying?
cat("Bot Ratio Summary:\n")
print(summary(bot_ratio))
# Handle missing or invalid values
bot_ratio[is.na(bot_ratio)] <- 0
bot_ratio[bot_ratio < 0] <- 0
bot_ratio[bot_ratio > 1] <- 1
# Normalize and convert to color
color_index <- ceiling(bot_ratio * 99) + 1
color_index[color_index < 1] <- 1
color_index[color_index > 100] <- 100
bot_color <- viridis::viridis(100)[color_index]
# Set node sizes based on degree
node_sizes <- sqrt(degree(net, cmode = "freeman")) / 2 + 0.5
# Plot
set.seed(42)
par(mar = c(0, 0, 2, 0))
gplot(net,
vertex.col = bot_color,
vertex.cex = node_sizes,
edge.col = scales::alpha("gray50", 0.4),
edge.lwd = (net %e% "weight") / 3,
main = "GitHub Contributor Network - By Bot Exposure",
displaylabels = FALSE,
mode = "fruchtermanreingold")
# Legend
color_levels <- seq(0, 1, by = 0.2)
legend_colors <- viridis::viridis(length(color_levels))
legend("bottomright",
legend = as.character(color_levels),
fill = legend_colors,
title = "Bot Ratio",
cex = 0.8)
bot_ratio <- net %v% "avg_bot_ratio"
# Safety check: Are they varying?
cat("Bot Ratio Summary:\n")
print(summary(bot_ratio))
# Handle missing or invalid values
bot_ratio[is.na(bot_ratio)] <- 0
bot_ratio[bot_ratio < 0] <- 0
bot_ratio[bot_ratio > 1] <- 1
# Normalize and convert to color
color_index <- ceiling(bot_ratio * 99) + 1
color_index[color_index < 1] <- 1
color_index[color_index > 100] <- 100
bot_color <- viridis::viridis(100)[color_index]
# Set node sizes based on degree
node_sizes <- sqrt(degree(net, cmode = "freeman")) / 2 + 0.5
# Plot
set.seed(42)
par(mar = c(0, 0, 2, 0))
gplot(net,
vertex.col = bot_color,
vertex.cex = node_sizes,
edge.col = scales::alpha("gray50", 0.4),
edge.lwd = (net %e% "weight") / 3,
main = "GitHub Contributor Network - By Bot Exposure",
displaylabels = FALSE,
mode = "fruchtermanreingold")
# Legend
color_levels <- seq(0, 1, by = 0.2)
legend_colors <- viridis::viridis(length(color_levels))
legend("bottomright",
legend = as.character(color_levels),
fill = legend_colors,
title = "Bot Ratio",
cex = 0.8)
# Ensure consistent vertex names and matching
V(g_filtered)$name <- V(g_filtered)$name   # Set names explicitly
nodes$id <- V(g_filtered)$name             # Sync nodes$id for matching
# Convert igraph to network object
net <- asNetwork(g_filtered)
node_order <- match(network.vertex.names(net), nodes$id)
# Assign vertex attributes
for (attr in colnames(nodes)) {
if (attr != "id" && length(node_order) == nrow(nodes)) {
net %v% attr <- nodes[node_order, attr]
}
}
# Assign edge attributes
net %e% "weight" <- edges$weight
net %e% "bot_event_count" <- edges$bot_event_count
# Generate color scale based on avg_bot_ratio
bot_ratio <- net %v% "avg_bot_ratio"
bot_ratio[is.na(bot_ratio)] <- 0
bot_ratio <- pmin(pmax(bot_ratio, 0), 1)  # Ensure between 0 and 1
color_index <- ceiling(bot_ratio * 99) + 1
bot_color <- viridis::viridis(100)[color_index]
# Node size based on degree
node_sizes <- sqrt(degree(net, cmode = "freeman")) / 2 + 0.5
# Plot the network
set.seed(42)
par(mar = c(0, 0, 2, 0))
gplot(net,
vertex.col = bot_color,
vertex.cex = node_sizes,
edge.col = scales::alpha("gray50", 0.4),
edge.lwd = (net %e% "weight") / 3,
main = "GitHub Contributor Network - By Bot Exposure",
displaylabels = FALSE,
mode = "fruchtermanreingold")
# Legend for bot ratio
legend("bottomright",
legend = seq(0, 1, 0.2),
fill = viridis::viridis(6),
title = "Bot Ratio",
cex = 0.8)
# Ensure consistent vertex names and matching
V(g_filtered)$name <- V(g_filtered)$name   # Set names explicitly
nodes$id <- V(g_filtered)$name             # Sync nodes$id for matching
# Convert igraph to network object
net <- asNetwork(g_filtered)
node_order <- match(network.vertex.names(net), nodes$id)
# Assign vertex attributes
for (attr in colnames(nodes)) {
if (attr != "id" && length(node_order) == nrow(nodes)) {
net %v% attr <- nodes[node_order, attr]
}
}
# Assign edge attributes
net %e% "weight" <- edges$weight
net %e% "bot_event_count" <- edges$bot_event_count
# Generate color scale based on avg_bot_ratio
bot_ratio <- net %v% "avg_bot_ratio"
bot_ratio[is.na(bot_ratio)] <- 0
bot_ratio <- pmin(pmax(bot_ratio, 0), 1)  # Ensure between 0 and 1
color_index <- ceiling(bot_ratio * 99) + 1
bot_color <- viridis::viridis(100)[color_index]
# Node size based on degree
node_sizes <- sqrt(degree(net, cmode = "freeman")) / 2 + 0.5
# Plot the network
set.seed(42)
par(mar = c(0, 0, 2, 0))
gplot(net,
vertex.col = bot_color,
vertex.cex = node_sizes,
edge.col = scales::alpha("gray50", 0.4),
edge.lwd = (net %e% "weight") / 3,
main = "GitHub Contributor Network - By Bot Exposure",
displaylabels = FALSE,
mode = "fruchtermanreingold")
# Legend for bot ratio
legend("bottomright",
legend = seq(0, 1, 0.2),
fill = viridis::viridis(6),
title = "Bot Exposure Ratio",
cex = 0.8)
unlink("Tutorial_cache", recursive = TRUE)
# Ensure consistent vertex names and matching
V(g_filtered)$name <- V(g_filtered)$name   # Just to be explicit
nodes$id <- V(g_filtered)$name             # Sync nodes$id
# Convert igraph to network object
net <- asNetwork(g_filtered)
node_order <- match(network.vertex.names(net), nodes$id)
# Safely assign vertex attributes
for (attr in colnames(nodes)) {
if (attr != "id") {
attr_values <- nodes[[attr]]
if (is.atomic(attr_values) && length(attr_values) == length(node_order)) {
tryCatch({
net %v% attr <- attr_values[node_order]
}, error = function(e) {
warning(paste("Skipping attribute:", attr, "-", e$message))
})
} else {
warning(paste("Skipping attribute:", attr, "- incompatible type or length."))
}
}
}
# Assign edge attributes safely
if (!is.null(edges$weight)) {
net %e% "weight" <- edges$weight
}
if (!is.null(edges$bot_event_count)) {
net %e% "bot_event_count" <- edges$bot_event_count
}
# Generate color scale from avg_bot_ratio
bot_ratio <- net %v% "avg_bot_ratio"
bot_ratio[is.na(bot_ratio)] <- 0
bot_ratio <- pmin(pmax(bot_ratio, 0), 1)  # Clip to [0,1]
color_index <- ceiling(bot_ratio * 99) + 1
bot_color <- viridis::viridis(100)[color_index]
# Set node sizes based on degree
node_sizes <- sqrt(degree(net, cmode = "freeman")) / 2 + 0.5
# Plot network
set.seed(42)
par(mar = c(0, 0, 2, 0))
gplot(net,
vertex.col = bot_color,
vertex.cex = node_sizes,
edge.col = scales::alpha("gray50", 0.4),
edge.lwd = ifelse(!is.null(net %e% "weight"), (net %e% "weight") / 3, 1),
main = "GitHub Contributor Network - By Bot Exposure",
displaylabels = FALSE,
mode = "fruchtermanreingold")
# Add legend for bot exposure
legend("bottomright",
legend = seq(0, 1, 0.2),
fill = viridis::viridis(6),
title = "Bot Exposure Ratio",
cex = 0.8)
# Ensure consistent vertex names and matching
V(g_filtered)$name <- V(g_filtered)$name
nodes$id <- V(g_filtered)$name
# Convert igraph to network object
net <- asNetwork(g_filtered)
node_order <- match(network.vertex.names(net), nodes$id)
# Safely assign vertex attributes
for (attr in colnames(nodes)) {
if (attr != "id") {
attr_values <- nodes[[attr]]
if (is.atomic(attr_values) && length(attr_values) == length(node_order)) {
tryCatch({
net %v% attr <- attr_values[node_order]
}, error = function(e) {
warning(paste("Skipping attribute:", attr, "-", e$message))
})
}
}
}
# Assign edge attributes safely
if (!is.null(edges$weight)) {
net %e% "weight" <- edges$weight
}
if (!is.null(edges$bot_event_count)) {
net %e% "bot_event_count" <- edges$bot_event_count
}
# Color scale for avg_bot_ratio
bot_ratio <- net %v% "avg_bot_ratio"
bot_ratio[is.na(bot_ratio)] <- 0
bot_ratio <- pmin(pmax(bot_ratio, 0), 1)
color_index <- ceiling(bot_ratio * 99) + 1
bot_color <- viridis::viridis(100)[color_index]
# Node sizes based on degree using sna::degree
node_sizes <- sqrt(sna::degree(net, cmode = "freeman")) / 2 + 0.5
# Plot network
set.seed(42)
par(mar = c(0, 0, 2, 0))
gplot(net,
vertex.col = bot_color,
vertex.cex = node_sizes,
edge.col = scales::alpha("gray50", 0.4),
edge.lwd = ifelse(!is.null(net %e% "weight"), (net %e% "weight") / 3, 1),
main = "GitHub Contributor Network - By Bot Exposure",
displaylabels = FALSE,
mode = "fruchtermanreingold")
# Add legend
legend("bottomright",
legend = seq(0, 1, 0.2),
fill = viridis::viridis(6),
title = "Bot Exposure Ratio",
cex = 0.8)
unlink("Tutorial_cache", recursive = TRUE)
unlink("Tutorial_cache", recursive = TRUE)
unlink("Tutorial_cache", recursive = TRUE)
model1_results
summary(model_binary)
str(edges$bot_event_count)
summary(edges$bot_event_count)
table(edges$bot_event_count)
